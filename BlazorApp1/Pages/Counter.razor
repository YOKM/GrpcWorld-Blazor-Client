@page "/counter"

@using GrpcService.Data;
@using GrpcService.Models;
@using GrpcService.Protos;
@using Grpc.Net.Client;


  


@*
    <h1>Counter</h1>

    <p>Current count: @currentCount</p>

    <button class="btn btn-primary" @onclick="IncrementCount">Click me</button>*@





@*Edit window popup in the center for editing *@
@if (ShowEditWindow == "Open")
{

    <div classs="box" id="outPopup" style="position:fixed ;top: 50%;  left: 50%; transform: translate(-50%, -50%); width: 60%;background:#dcdfed;border-color:black;border-style:solid">


        <div class="modal-header text-center">
            <h4 class="modal-title w-100 font-weight-bold">Edit Schedule Task</h4>
            <h5>@EditTask.Jobname </h5>

            <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="@CloseEditWindow">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>


        <table class="tg" style=" width: 100%;height: 100%;">
            <tr>
                @*<th class="tg-yt02">Task Name </th>
                <th class="tg-yt02">Schedule Time </th>
                <th class="tg-yt02">Set Active </th>*@

            </tr>
            @*class="tg-3w7a"*@
            <tr>
                <td class="tg-5d1u">
                    <input type="text" class="form-control" @bind-value="@EditTask.Jobname" />
                    <label>Job Name</label>
                
                </td>

                <td class="tg-5d1u">
                    <input type="text" class="form-control" @bind-value="@EditTask.ScheduleTIME" />
                    <label>Schedule Time</label>

                </td>

                <td class="tg-5d1u">
                    <input type="text" class="form-control" @bind-value="@EditTask.IsActive" />
                    <label>Is Active</label>

                </td>

            </tr>
        </table>

        <table class="tg" style=" width: 100%;height: 100%;">
            -
            <tr>
                @*<th class="tg-yt02">Email Notification </th>
                <th class="tg-yt02">sFTP Host </th>*@
            </tr>
            <tr>
                <td class="tg-3w7a">
                    <input type="text" class="form-control" @bind-value="@EditTask_Detail.EmailNotificationAddress" />
                    <label>Email Notification</label>
                </td>

                <td class="tg-5d1u">
                    <input type="text" class="form-control" @bind-value="@EditTask_Detail.SFtphost"/>
                    <label>sFTP Host</label>
                 </td>
</tr>
        </table>

        <table class="tg" style=" width: 100%;height: 100%;">
            @*<tr>
                <th class="tg-yt02">Upload From </th>
                <th class="tg-yt02">Upload To </th>
            </tr>*@
            <tr>
                <td class="tg-3w7a"><input type="text" class="form-control" @bind-value="@EditTask_Detail.SFtpuploadFrom" /> 
                                    <label>sFTP Uplopad From</label></td>
                <td class="tg-5d1u"><input type="text" class="form-control" @bind-value="@EditTask_Detail.SFtpuploadto" />
                                    <label>sFTP Uplaod To</label></td>
            </tr>
        </table>

        <table class="tg" style=" width: 100%;height: 100%;">
            @*<tr>
                <th class="tg-yt02">Download From </th>
                <th class="tg-yt02">Download To </th>
            </tr>*@
            <tr>
                <td class="tg-3w7a"><input type="text" class="form-control" @bind-value="@EditTask_Detail.SFtpdownloadFrom" />
                                    <label>sFTP Download From</label></td>
                <td class="tg-5d1u"><input type="text" class="form-control" @bind-value="@EditTask_Detail.SFtpdownloadTo" />
                                    <label>sFTP Download To</label></td>
            </tr>
        </table>

        <table class="tg" style=" width: 100%;height: 100%;">
            @*<tr>
                <th class="tg-yt02">Other1 </th>
                <th class="tg-yt02">Other2 </th>
                <th class="tg-yt02">Other3 </th>
                <th class="tg-yt02">Other4 </th>
            </tr>*@
            <tr>
                <td class="tg-3w7a"><input type="text" class="form-control" @bind-value="@EditTask_Detail.Extra1" /> 
                                    <label>Extra1</label></td>
                <td class="tg-5d1u"><input type="text" class="form-control" @bind-value="@EditTask_Detail.Extra2" />
                                    <label>Extra2</label></td>
                <td class="tg-3w7a"><input type="text" class="form-control" @bind-value="@EditTask_Detail.Extra3" />
                                    <label>Extra3</label></td>
                <td class="tg-5d1u"><input type="text" class="form-control" @bind-value="@EditTask_Detail.Extra4" />
                                    <label>Extra4</label></td>
            </tr>
        </table>


        <table class="tg" style=" width: 100%;height: 100%;">
            @*<tr>
                <th class="tg-yt02">Description</th>

            </tr>*@
            <tr>
                @*<td class="tg-5d1u"><input type="text" class="form-control" value="@EditTask.Description" /></td>*@
                <td class="tg-3w7a"><textarea type="text" class="form-control" @bind="@EditTask.Description" />
                                    <label>Description</label></td>
            </tr>
        </table>
        <div id="submission">
            <button @onclick="@SaveTask" type="button" class="btn btn-primary">Save</button>
            <button @onclick="@CloseEditWindow" type="button" class="btn btn-primary">Cancel</button>
        </div>


        @* *@


    </div>

}




@* Main window *@


@if (Im_TaskList == null)
{

    <p><em>Loading...</em></p>

}
else
{
    @*<p>Jobname : @Im_TaskList.Items.Count()</p>*@


    <table>

        <tr style="height: 30px; background-color:#336699 ; color:#FFFFFF ;border: solid 1px #659EC7;">
            <td>
                @*Header and filter should go here*@

            </td>

            <td align="left" style="border: solid 1px #659EC7; padding: 5px;table-layout:fixed;">
                Job Name
                <img src="@ImageSortname" @onclick="@(async () => await JobSorting("JobName"))" />
                <label style="font-size:10px" @onclick="@(async () => await JobSorting("JobName"))">Sort </label>

                @*<input width="70" @onchange=@onJobnameChanged oninput="(this.dispatchEvent(new CustomEvent('change', {bubbles: true})))" />*@
                <input type="text" class="form-control" placeholder="Search" aria-label="" aria-describedby="basic-addon1"
                       @onchange=@onJobnameChanged oninput="(this.dispatchEvent(new CustomEvent('change', {bubbles: true})))" />
                <label style="font-size:10px">Search</label>
            </td>
            <td data-toggle="popover" style="border: solid 1px #659EC7; padding: 5px;table-layout:fixed;">
                Schedule Time
            </td>
            <td align="left" style="border: solid 1px #659EC7; padding: 5px;table-layout:fixed;">
                Active
            </td>
            <td align="left" style="border: solid 1px #659EC7; padding: 5px;table-layout:fixed;">
                Description
            </td>
            <td align="left" style="border: solid 1px #659EC7; padding: 5px;table-layout:fixed;">
                Edit
            </td>
        </tr>



        @*Master info*@
        @foreach (var MTask in Im_TaskList.Items)
        {

            <tr style="border-style:solid;border-width:2px;border-color: @(MTask.Id == JobId ? "#ff6a00" : "#a2aabe")">
                @*Expand Image in the first cell to open details info *@

                <td>


                    @*<button class="btn btn-primary" @onclick="@(async () => await getTaskDetails(MTask.Id))">New</button>
                        <label>@DetailTask.EmailNotificationAddress</label>*@

                    @if (MTask.Id == JobId)
                    {
                        <img src="@Imagename" @onclick="@(async () => await getTaskDetails(MTask.Id))" />
                    }
                    else
                    {
                        <img src="Images/expand.png" @onclick="@(async () => await getTaskDetails(MTask.Id))" />
                    }

                </td>



                @*<td>@MTask.Id</td>*@
                <td align="left" style="border: solid 1px #659EC7; padding: 5px;table-layout:fixed; ">
                    @MTask.Jobname
                </td>
                <td align="left" style="border: solid 1px #659EC7; padding: 5px;table-layout:fixed;">
                    @MTask.ScheduleTIME

                </td>
                <td align="left" style="border: solid 1px #659EC7; padding: 5px;table-layout:fixed;">
                    @MTask.IsActive
                    @if (MTask.IsActive == "True")
                    {
                        <img src="Images/bullet_green.png" />
                    }
                    else
                    {
                        <img src="Images/bullet_red.png" />

                    }
                </td>
                <td align="left" style="border: solid 1px #659EC7; padding: 5px;table-layout:fixed;">
                    @MTask.Description
                </td>

                @*Edit Button onclick = "@(async () => await EditTaskMaster(MTask.Id))"*@
                <td>
                    <img src="Images/input_edit.png" @onclick="@(async () => await EditScheduleTask(MTask.Id))" />
                </td>
            </tr>



            @if (DetailTask != null)
            {
                @if (showDetails)
                {
                    @if (MTask.Id == JobId)
                    {
                        <tr id="detailsRow" colspan="6">
                            <td colspan="6">

                                <div><text style="color:brown; font-size:medium">Details on Task: </text></div>

                                @if (!string.IsNullOrWhiteSpace(@DetailTask.EmailNotificationAddress))
                                {
                                    <div> <span class="detailsTitle">EmailNotifications:</span> <span class="detailsData">@DetailTask.EmailNotificationAddress </span></div>

                                }

                                @if (!string.IsNullOrWhiteSpace(@DetailTask.Extra1))
                                {
                                    <div> <span class="detailsTitle">Extra1:</span> <span class="detailsData">@DetailTask.Extra1 </span></div>

                                }

                                @if (!string.IsNullOrWhiteSpace(@DetailTask.Extra2))
                                {
                                    <div> <span class="detailsTitle">Extra2:</span> <span class="detailsData">@DetailTask.Extra2 </span></div>

                                }

                                @if (!string.IsNullOrWhiteSpace(@DetailTask.Extra3))
                                {
                                    <div> <span class="detailsTitle">Extra3:</span> <span class="detailsData">@DetailTask.Extra3 </span></div>

                                }

                                @if (!string.IsNullOrWhiteSpace(@DetailTask.Extra4))
                                {
                                    <div> <span class="detailsTitle">Extra4:</span> <span class="detailsData">@DetailTask.Extra4 </span></div>

                                }

                                @if (!string.IsNullOrWhiteSpace(@DetailTask.Extra5))
                                {
                                    <div> <span class="detailsTitle">Extra5:</span> <span class="detailsData">@DetailTask.Extra5 </span></div>

                                }

                                @if (!string.IsNullOrWhiteSpace(@DetailTask.TimeSpanWait))
                                {
                                    <div> <span class="detailsTitle">TimeSpanWait:</span> <span class="detailsData">@DetailTask.TimeSpanWait </span></div>

                                }

                                @if (!string.IsNullOrWhiteSpace(@DetailTask.FileExtensiontoUpload))
                                {
                                    <div> <span class="detailsTitle">FileExtensiontoUpload:</span> <span class="detailsData">@DetailTask.FileExtensiontoUpload </span></div>

                                }


                                @if (!string.IsNullOrWhiteSpace(@DetailTask.PortNumber))
                                {
                                    <div> <span class="detailsTitle">PortNumber:</span> <span class="detailsData">@DetailTask.PortNumber </span></div>

                                }

                                @if (!string.IsNullOrWhiteSpace(@DetailTask.PortNumber))
                                {
                                    <div> <span class="detailsTitle">PortNumber:</span> <span class="detailsData">@DetailTask.PortNumber </span></div>

                                }

                                @if (!string.IsNullOrWhiteSpace(@DetailTask.SshfingerPrint))
                                {
                                    <div> <span class="detailsTitle">SSHFingerPrint:</span> <span class="detailsData">@DetailTask.SshfingerPrint </span></div>

                                }

                                @if (!string.IsNullOrWhiteSpace(@DetailTask.PaswordsFtp))
                                {
                                    <div> <span class="detailsTitle">PasswordsFTP:</span> <span class="detailsData">@DetailTask.PaswordsFtp </span></div>

                                }

                                @if (!string.IsNullOrWhiteSpace(@DetailTask.UsernamesFtp))
                                {
                                    <div> <span class="detailsTitle">UsernamesFTP:</span> <span class="detailsData">@DetailTask.UsernamesFtp </span></div>

                                }


                                @if (!string.IsNullOrWhiteSpace(@DetailTask.SFtpdownloadTo))
                                {
                                    <div> <span class="detailsTitle">sFTPDownloadTo:</span> <span class="detailsData">@DetailTask.SFtpdownloadTo </span></div>

                                }

                                @if (!string.IsNullOrWhiteSpace(@DetailTask.SFtpdownloadFrom))
                                {
                                    <div> <span class="detailsTitle">sFTPDownloadFrom:</span> <span class="detailsData">@DetailTask.SFtpdownloadFrom </span></div>

                                }

                                @if (!string.IsNullOrWhiteSpace(@DetailTask.SFtpuploadFrom))
                                {
                                    <div> <span class="detailsTitle">sFTPuploadFrom:</span> <span class="detailsData">@DetailTask.SFtpuploadFrom </span></div>

                                }

                                @if (!string.IsNullOrWhiteSpace(@DetailTask.SFtpuploadto))
                                {
                                    <div> <span class="detailsTitle">sFTPuploadTo</span> <span class="detailsData">@DetailTask.SFtpuploadto </span></div>

                                }

                                @if (!string.IsNullOrWhiteSpace(@DetailTask.SFtphost))
                                {
                                    <div> <span class="detailsTitle">sFTPHost</span> <span class="detailsData">@DetailTask.SFtphost </span></div>

                                }


                            </td>
                        </tr>



                    }

                }
            }

        }

    </table>




}




<style type="text/css">

    #submission {
        width: 100%;
    }

    #detailsRow {
        border-bottom-color: darkgreen;
        background-color: gainsboro
    }

    #detailsRow {
        font-size: 13px;
    }

        #detailsRow .detailsTitle {
            min-width: 9%;
            display: inline-block;
        }

        #detailsRow .detailsData {
            display: inline-block;
            color: darkblue;
            font-style: italic;
            font-family: Ubuntu;
            <!-- font-size: medium -->
        }

    #submission button {
        float: right;
        margin-right: 5px;
    }



    .tg {
        border-collapse: collapse;
        border-spacing: 0;
        border: none;
        border-color: #aabcfe;
    }

        .tg td {
            font-family: sans-serif;
            font-size: 14px;
            padding: 10px 5px;
            border-style: solid;
            border-width: 0px;
            overflow: hidden;
            word-break: normal;
            border-color: #aabcfe;
            color: #669;
            background-color: #e8edff;
          
        }

        .tg th {
            font-family: sans-serif;
            font-size: 14px;
            font-weight: normal;
            padding: 10px 5px;
            border-style: solid;
            border-width: 0px;
            overflow: hidden;
            word-break: normal;
            border-color: #aabcfe;
            color: #039;
            background-color: #b9c9fe;
        }

        .tg .tg-5d1u {
            background-color: #D2E4FC;
            font-weight: bold;
            /* font-family: "Lucida Console", Monaco, monospace !important;*/
            border-color: inherit;
            text-align: left;
            vertical-align: top
        }

        .tg .tg-yt02 {
            font-weight: normal;
            font-size: small;
            font-family: "Lucida Console", Monaco, monospace !important;
            border-color: inherit;
            text-align: left;
            vertical-align: top
        }

        .tg .tg-3w7a {
            background-color: #D2E4FC;
            font-weight: bold;
            font-family: "Lucida Console", Monaco, monospace !important;
            color: #493f3f;
            border-color: inherit;
            text-align: left
        }




    }
</style>



@code {

    ImagingScheduleJob[] imagingScheduleJobs;

    ImagingScheduleJob_Detail[] imagingScheduleJob_Details;



    private Task task;

    int currentCount = 0;

    ImagingScheduleJobModel Im = new ImagingScheduleJobModel();

    ImagingScheduleJobList Im_TaskList = new ImagingScheduleJobList();
    ImagingScheduleJobList Im_TaskListF = new ImagingScheduleJobList();

    ImagingScheduleJobList_Detail ImDetail_TaskList = new ImagingScheduleJobList_Detail();

    ImagingScheduleJobLookupModel DetailsTask = new ImagingScheduleJobLookupModel();


    static GrpcChannel channel = GrpcChannel.ForAddress("https://localhost:5001");
    RemoteImagingScheduleJob.RemoteImagingScheduleJobClient client =
        new RemoteImagingScheduleJob.RemoteImagingScheduleJobClient(channel);



    ReplyJob_Detail RJobDetails = new ReplyJob_Detail();

    ImagingScheduleJobModel_Detail DetailTask = new ImagingScheduleJobModel_Detail();


    //Edit data

    ImagingScheduleJobModel EditTask = new ImagingScheduleJobModel();
    ImagingScheduleJobModel_Detail EditTask_Detail = new ImagingScheduleJobModel_Detail();


    RemoteImagingScheduleJob_Detail.RemoteImagingScheduleJob_DetailClient client_Detail = new RemoteImagingScheduleJob_Detail.RemoteImagingScheduleJob_DetailClient(channel);

    //   RemoteImagingScheduleJob.RemoteImagingScheduleJobClient client = new RemoteImagingScheduleJob.RemoteImagingScheduleJobClient(channel);




    int CurrentDetailsJobID = 0;

    string Imagename = "Images/expand.png";
    string ImageSortname = "Images/sort_ascending.png";
    bool showDetails = false;
    string ShowEditWindow = "";

    string closeMessage = "";
    string Messages = "";
    bool sortStatus = false;
    int JobId = 0;
    string test;

    void IncrementCount()
    {
        currentCount++;

    }


    protected override async Task OnInitializedAsync()
    {

        var ScheduleJobClient = new RemoteImagingScheduleJob.RemoteImagingScheduleJobClient(channel);
        var ScheduleJobInput = new ImagingScheduleJobLookupModel { Id = 45 };
        Im = await ScheduleJobClient.GetImagingScheduleJobInfoAsync(ScheduleJobInput);

        var em_job = new EmptyJob();
        var ImgJobfilter = new ImgJobRetrieveOptions();

        ImgJobfilter.Filter = "asc";

        Im_TaskList = await ScheduleJobClient.RetrieveAllImagingScheduleJobsAsync(em_job);
        //   Im_TaskListF = await client.RetrieveAllImagingScheduleJobsFilterAsync(ImgJobfilter);


    }


    async Task getTaskDetails(int JobId_fromMasterAPI)
    {
        //showDetails = true;

        if (JobId != JobId_fromMasterAPI)
        {
            Imagename = "Images/expand.png";
            showDetails = true;

        }
        else
        {
            if (showDetails == false)
            {
                Imagename = "Images/expand.png";

                showDetails = true;

            }
            else
            {
                Imagename = "Images/toggle.png";
                showDetails = false;
            }

        }


        JobId = JobId_fromMasterAPI;

        Console.WriteLine("Details" + JobId_fromMasterAPI);

        var client_detail = new RemoteImagingScheduleJob_Detail.RemoteImagingScheduleJob_DetailClient(channel);
        var input_Detail = new ImagingScheduleJobLookupModel_Detail { Jobid = JobId_fromMasterAPI };


        var reply_Detail = await client_detail.GetImagingScheduleJobInfo_DetailAsync(input_Detail);


        //DetailTask = reply_Detail.Clone();


        this.DetailTask = reply_Detail;






    }

    async Task EditScheduleTask(int JobIdtoEdit)
    {
        ShowEditWindow = "Open";
        showDetails = false;

        //find the task -> will be return in a MOdel
        // use that model to update/edit

        var client = new RemoteImagingScheduleJob.RemoteImagingScheduleJobClient(channel);

        var input = new ImagingScheduleJobLookupModel { Id = JobIdtoEdit };

        var reply = await client.GetImagingScheduleJobInfoAsync(input);


        // Use reply as EditModel


        EditTask = reply.Clone();

        // Detail Info for Task

        var client_detail = new RemoteImagingScheduleJob_Detail.RemoteImagingScheduleJob_DetailClient(channel);

        var input_Detail = new ImagingScheduleJobLookupModel_Detail { Jobid = JobIdtoEdit };


        var reply_Detail = await client_detail.GetImagingScheduleJobInfo_DetailAsync(input_Detail);

        EditTask_Detail = reply_Detail;

    }


    void CloseEditWindow()
    {

        ShowEditWindow = "Close";

    }

    void Editwindow()
    {
        ShowEditWindow = "Open";

    }

    protected async Task SaveTask()
    {

        await UpdateImagingScheduleJob(channel, EditTask);
        ShowEditWindow = "Close";
        await OnInitializedAsync();
    }


    async Task UpdateImagingScheduleJob(GrpcChannel channel, ImagingScheduleJobModel ImagingShceduleTask_toUpdate)
    {


        var reply = await client.UpdateImagingScheduleJobAsync(EditTask);


        var replyDetail = await client_Detail.UpdateImagingScheduleJob_DetailAsync(EditTask_Detail);

        Console.WriteLine(reply.Result);
    }


    protected async Task JobSorting(string sortColumn)
    {

        var ImgJobfilter = new ImgJobRetrieveOptions();


        if (sortStatus)
        {
            ImageSortname = "Images/sort_descending.png";
            sortStatus = false;

            ImgJobfilter.Filter = "desc";

            Im_TaskListF = await client.RetrieveAllImagingScheduleJobsFilterAsync(ImgJobfilter);


        }
        else
        {
            ImageSortname = "Images/sort_ascending.png";

            sortStatus = true;

            ImgJobfilter.Filter = "asc";

            Im_TaskListF = await client.RetrieveAllImagingScheduleJobsFilterAsync(ImgJobfilter);

        }
        Im_TaskList = Im_TaskListF.Clone();
        test = Im_TaskList.Items[0].Jobname;

        StateHasChanged();  //refresh

        // await OnInitializedAsync();

    }




    void onJobnameChanged(ChangeEventArgs args)
    {
        string values = args.Value.ToString();
        Console.WriteLine("values from on Jobchange UIChangeEvents: " + values);

        JobNameFilteringlist(values, "Jobname");

    }

    protected async Task JobNameFilteringlist(string Value, string columnName)
    {

        Console.WriteLine("values from on Jobchange UIChangeEvents: " + Value);

        var ImgJobfilter = new ImgJobRetrieveOptions();

        ImgJobfilter.Filter = "search";
        ImgJobfilter.InputValue = Value;

        Im_TaskList = await client.RetrieveAllImagingScheduleJobsFilterAsync(ImgJobfilter);


        StateHasChanged();


    }



    protected async Task JobSortingA(string sortColumn)
    {
        //MasterTask = await Http.GetJsonAsync<ImagingScheduleJob[]>("/api/ImagingScheduleJobs/");

        if (sortStatus)
        {
            ImageSortname = "Images/sort_descending.png";
            sortStatus = false;
            switch (sortColumn)
            {

                case "JobName":
                    //Im_TaskList =  Im_TaskList.OrderBy(x => x.Jobname).ToArray();
                    Im_TaskList.Items.OrderBy(x => x.Jobname).ToList();
                    break;
                case "JobID":
                    //Im_TaskList =  Im_TaskList.OrderBy(x => x.Jobname).ToArray();
                    Im_TaskList.Items.OrderBy(x => x.Id);
                    break;

            }
        }
        else
        {
            ImageSortname = "Images/sort_ascending.png";

            sortStatus = true;
            switch (sortColumn)
            {
                case "JobName":
                    //   MasterTask = MasterTask.OrderByDescending(x => x.Jobname).ToArray();
                    Im_TaskList.Items.OrderByDescending(x => x.Jobname).ToList();
                    break;
                case "JobID":
                    //   MasterTask = MasterTask.OrderByDescending(x => x.Jobname).ToArray();
                    Im_TaskList.Items.OrderByDescending(x => x.Id);
                    break;
            }


        }

        StateHasChanged();

        //   await OnInitializedAsync();

    }





}
